[
  {
    "id": 1,
    "title": "duyi笔记\r",
    "author": "Jihui\r",
    "date": "May 17, 2024\r",
    "content": "\r\n# 事件循环 （event|message loop）\r\n## 进程\r\n程序运行需要有专属的内存空间, \r\n## 线程\r\n## 浏览器的进程和线程\r\n### 渲染主线程\r\n浏览器中最繁忙的线程, 处理的任务包括但不限于\r\n- 解析HTML\r\n- 解析CSS\r\n- 计算样式\r\n- 布局\r\n- 处理图层\r\n- 每秒按帧率画页面\r\n- 执行全局JS代码\r\n- 执行事件处理函数\r\n- 执行计时器的回调函数\r\n\r\n1. 在最开始的时候, 渲染主线程进入一个无限循环.\r\n2. 每次循环会检查消息队列中是否有任务存在, 有的话获取队列中第一个任务进行执行, 执行完一个后进入下一次循环; 没有的话, 则进入休眠状态, 等待任务来唤醒.\r\n3. 其他所有线程(包括其他进程的线程)可以随时向消息队列添加任务, 新任务会加到消息队列的末尾.\r\n这整个过程被称之为事件循环, 简言之就是创建一个主线程监听任务列表, 如果有任务了那就执行, 没有则休眠, 任务执行遵从列表的顺序, 执行列表第一项任务, 排队执行。\r\n\r\n## 异步\r\n在执行过程中会遇到一些无法立即执行的任务,如:\r\n- 计算完成后需要执行的任务 --- setTimeout, setInterval\r\n- 网络通信完成后需要执行的任务 --- XHR, Fetch\r\n- 用户操作后需要执行的任务 --- addEventListener\r\n如果让渲染主线程等待这些任务的时机到达, 就会导致主线程长期处于**阻塞**的状态, 从而导致浏览器 **卡死**\r\n渲染主线程承担着极其重要的任务, 因此无论如何都不能阻塞, 所以浏览器选择异步来解决问题.\r\n\r\n### JS异步总结\r\nJS是一门**单线程语言**, 因为它运行在浏览器的**渲染主线程**中, 而渲染主线程只有一个, 同时渲染主线程承担着**诸多的工作**, 包含渲染页面、执行JS等\r\n如果使用同步的方式, 极有可能导致主线程阻塞, 从而导致消息队列中许多其他的任务无法得到执行.\r\n这种情况一方面会导致繁忙的主线程白白消耗时间, 另一方面导致页面无法及时更新, 给用户造成卡死现象.\r\n所以浏览器采用异步的方式来避免. 具体做法是当某些任务发生时, 比如计时器、网络、监听事件, 主线程将任务交给其他线程去处理, 自身立即结束任务的执行, 转而执行后续代码. 当其他线程完成时, 将事先传递的回调函数包装成任务, 加入到消息队列的末尾排队, 等待主线程调度执行.\r\n在这种异步模式下, 浏览器用不阻塞, 从而最大限度的保证了单线程的流畅运行.\r\n\r\n### JS为何会阻碍渲染\r\n\r\n\r\n```mermaid\r\ngraph TD;\r\n    A-->B;\r\n    A-->C;\r\n    B-->D;\r\n    C-->D;"
  },
  {
    "id": 2,
    "title": "It's create for test2\r",
    "author": "Jihui\r",
    "date": "April 30, 2024\r",
    "coop": "someone\r",
    "content": "\r\n# Hello World\r\n*BALA BALA*"
  }
]