[
  {
    "id": 1,
    "title": "duyi笔记",
    "author": "Jihui",
    "date": "May 17, 2024",
    "tags": [
      "笔记",
      "事件循环"
    ],
    "content": "\r\n# 事件循环 （event|message loop）\r\n## 进程\r\n程序运行需要有专属的内存空间, \r\n## 线程\r\n## 浏览器的进程和线程\r\n### 渲染主线程\r\n浏览器中最繁忙的线程, 处理的任务包括但不限于\r\n- 解析HTML\r\n- 解析CSS\r\n- 计算样式\r\n- 布局\r\n- 处理图层\r\n- 每秒按帧率画页面\r\n- 执行全局JS代码\r\n- 执行事件处理函数\r\n- 执行计时器的回调函数\r\n\r\n1. 在最开始的时候, 渲染主线程进入一个无限循环.\r\n2. 每次循环会检查消息队列中是否有任务存在, 有的话获取队列中第一个任务进行执行, 执行完一个后进入下一次循环; 没有的话, 则进入休眠状态, 等待任务来唤醒.\r\n3. 其他所有线程(包括其他进程的线程)可以随时向消息队列添加任务, 新任务会加到消息队列的末尾.\r\n这整个过程被称之为事件循环, 简言之就是创建一个主线程监听任务列表, 如果有任务了那就执行, 没有则休眠, 任务执行遵从列表的顺序, 执行列表第一项任务, 排队执行。\r\n\r\n## 异步\r\n在执行过程中会遇到一些无法立即执行的任务,如:\r\n- 计算完成后需要执行的任务 --- setTimeout, setInterval\r\n- 网络通信完成后需要执行的任务 --- XHR, Fetch\r\n- 用户操作后需要执行的任务 --- addEventListener\r\n如果让渲染主线程等待这些任务的时机到达, 就会导致主线程长期处于**阻塞**的状态, 从而导致浏览器 **卡死**\r\n渲染主线程承担着极其重要的任务, 因此无论如何都不能阻塞, 所以浏览器选择异步来解决问题.\r\n\r\n面试题: JS异步\r\nJS是一门**单线程语言**, 因为它运行在浏览器的**渲染主线程**中, 而渲染主线程只有一个, 同时渲染主线程承担着**诸多的工作**, 包含渲染页面、执行JS等\r\n如果使用同步的方式, 极有可能导致主线程阻塞, 从而导致消息队列中许多其他的任务无法得到执行.\r\n这种情况一方面会导致繁忙的主线程白白消耗时间, 另一方面导致页面无法及时更新, 给用户造成卡死现象.\r\n所以浏览器采用异步的方式来避免. 具体做法是当某些任务发生时, 比如计时器、网络、监听事件, 主线程将任务交给其他线程去处理, 自身立即结束任务的执行, 转而执行后续代码. 当其他线程完成时, 将事先传递的回调函数包装成任务, 加入到消息队列的末尾排队, 等待主线程调度执行.\r\n在这种异步模式下, 浏览器用不阻塞, 从而最大限度的保证了单线程的流畅运行.\r\n\r\n### JS为何会阻碍渲染\r\nJS的执行会影响页面的绘制, 如果一段JS执行的时间很长, 就会导致绘制任务一直得不到执行, 致使浏览器卡死状态\r\n\r\n### 任务有优先级吗\r\n任务没有优先级, 在消息队列中先进先出\r\n\r\n但是消息队列有优先级:\r\n- 每个任务都有一个任务类型, 同一个类型的任务必须在一个队列, 不同类型的任务可以分属于不同的队列. 在一次事件循环中, 浏览器可以根据实际情况从不同的队列中取出任务执行.\r\n- 浏览器必须准备好一个微队列, 微队列中的任务优先所有其他任务执行.\r\n\r\n> 随着浏览器的复杂度急剧提升, W3C 不再使用宏队列的说法\r\n\r\n\r\n在目前的 chorme 实现中, 至少包含了以下队列:\r\n- 延时队列: 用于存放计时器到达后的回调任务, 优先级[中]\r\n- 交互队列: 用于存放用户操作后产生的事件处理任务, 优先级[高]\r\n- 微队列: 用户存放需要最快执行的任务, 优先级[最高]\r\n\r\n``` JS\r\n// 立即把一个函数添加到微队列\r\nPromise.resolve().then(func)\r\n```\r\n\r\n面试题: JS的事件循环:\r\n事件循环又叫做消息循环, 是浏览器渲染主线程的工作方式.\r\n在Chorme 的源码中, 它开启一个不会结束的for循环, 每次循环从消息队列中取出第一个任务执行, 而其它线程只需要在合适的时候将任务加入到队列末尾即可.\r\n过去把消息队列简单分为宏队列和微队列, 这种说法目前已经无法满足复杂的浏览器环境, 取而代之的是一种更为灵活多变的处理方式.\r\n根据W3C官方解释, 每个任务有不同的类型, 同类型的任务必须在同一个队列, 不同任务可以属于不同队列, 不同任务队列有不同优先级, 在一次事件循环中, 由浏览器自行决定取哪一个队列的任务. 但浏览器必须有一个微队列, 微队列的任务一定具有最高的优先级, 必须优先调度执行.\r\n\r\n面试题: JS中的计时器能做到精确计时吗? 为什么?\r\n不能, 因为\r\n1. 计算机硬件没有原子钟, 无法做到精确计时\r\n2. 操作系统的计时函数本身就有少量偏差, 由于JS的计时器最终调用的是操作系统的函数, 也就携带了这些偏差\r\n3. 按照W3C的标准, 浏览器实现计时器时, 如果嵌套层级超过5层, 则会带有4毫秒的最少时间, 这样在计时时间少于4毫秒时又带来了偏差\r\n4. 受事件循环影响, 计时器的回调函数只能在主线程空闲时运行, 因此又带来了偏差"
  },
  {
    "id": 2,
    "title": "该网站",
    "author": "Jihui",
    "date": "April 30, 2024",
    "tags": [
      "网页设计"
    ],
    "coop": "someone",
    "content": "\r\n# 设计思路\r\n## 首页\r\n想要添加一些功能性实现的内容\r\n## 档案页\r\n### 关于我\r\n简要介绍\r\n### 教育\r\n学历背景\r\n### 项目\r\n做过的项目\r\n### 技术栈\r\n使用过的技术\r\n### 联系方式\r\n可以直接发送邮件的便捷联系方式(需更新)\r\n## 记事页\r\n1. 能够读取markdown格式文件\r\n2. 可以对文章进行简单的筛选方式\r\n3. 可以根据标签对文字进行筛选(更新中)\r\n\r\n## 项目页\r\n想要添加一些展现项目的内容"
  }
]